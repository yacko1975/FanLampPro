// Convert a hex string to a byte array
function hexToBytes(hex) {
    let bytes = [];
    for (let c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
    return bytes;
}

// Convert a byte array to a hex string
function bytesToHex(bytes) {
    let hex = [];
    for (let i = 0; i < bytes.length; i++) {
        let current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];
        hex.push((current >>> 4).toString(16));
        hex.push((current & 0xF).toString(16));
    }
    return hex.join("");
}

var hexChar = ["0", "1", "2", "3", "4", "5", "6", "7","8", "9", "a", "b", "c", "d", "e", "f"];

function byteToHex(b) {
  return hexChar[(b >> 4) & 0x0f] + hexChar[b & 0x0f];
}

const XBOXES = [
  0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
  0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
  0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
  0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
  0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
  0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
  0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
  0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
  0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
  0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
  0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
  0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
  0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
  0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
  0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
  0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
];

function unwhiten(buf, size, seed) {
  const res = [];
  for (let i = 0; i < size; i++) {
let xbPos = (seed+i+9) & 0x1f;
let xb = XBOXES[xbPos];

    //console.log(`Position - ${i}, xboxes Pos - ${xbPos}, xbox - ${xb}`);
    //console.log(`step 0 - ${buf[i].toString(16)}`);
    res[i] = buf[i] ^ XBOXES[(seed + i + 9) & 0x1f];
    //console.log(`step 1 - ${res[i].toString(16)}`);
    res[i] ^= seed;
    //console.log(`step 2 - ${res[i].toString(16)}`);
    res[i] &= 0xff;
    //console.log(`step 3 - ${res[i].toString(16)}`);
  }
  return res;
}


function ProcessData(rawData) {

let cleanedData = rawData.replace(/[^a-f0-9]/i, '');

let bytesArray = hexToBytes(cleanedData);
let seed = bytesArray.slice(bytesArray.length-4,bytesArray.length-2);
let data = bytesArray.slice(9, 27);
let seedInt =  (((seed[1] & 0xFF) << 8) | (seed[0] & 0xFF));

//console.log(seedInt);

//console.log(`Seed - ${bytesToHex(seed.reverse())}`);

//console.log(seed);
//console.log(data);

let cleanData = unwhiten(data,data.length, seedInt)


//console.log(bytesArray);

//console.log(cleanData);

return bytesToHex(cleanData);

}


//console.log(args[0]);
